/**
 * This class is generated by jOOQ
 */
package services.generated.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl

import services.generated.Keys
import services.generated.Public
import services.generated.tables.records.UserRoleRecord


object UserRole {

	/**
	 * The reference instance of <code>public.user_role</code>
	 */
	val USER_ROLE = new UserRole
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
class UserRole(alias : String, aliased : Table[UserRoleRecord], parameters : Array[ Field[_] ]) extends TableImpl[UserRoleRecord](alias, Public.PUBLIC, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[UserRoleRecord] = {
		classOf[UserRoleRecord]
	}

	/**
	 * The column <code>public.user_role.id</code>.
	 */
	val ID : TableField[UserRoleRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), "")

	/**
	 * The column <code>public.user_role.username</code>.
	 */
	val USERNAME : TableField[UserRoleRecord, String] = createField("username", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

	/**
	 * The column <code>public.user_role.has_role</code>.
	 */
	val HAS_ROLE : TableField[UserRoleRecord, String] = createField("has_role", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

	/**
	 * Create a <code>public.user_role</code> table reference
	 */
	def this() = {
		this("user_role", null, null)
	}

	/**
	 * Create an aliased <code>public.user_role</code> table reference
	 */
	def this(alias : String) = {
		this(alias, services.generated.tables.UserRole.USER_ROLE, null)
	}

	private def this(alias : String, aliased : Table[UserRoleRecord]) = {
		this(alias, aliased, null)
	}

	override def getIdentity : Identity[UserRoleRecord, Integer] = {
		Keys.IDENTITY_USER_ROLE
	}

	override def getPrimaryKey : UniqueKey[UserRoleRecord] = {
		Keys.USER_ROLE_PKEY
	}

	override def getKeys : List[ UniqueKey[UserRoleRecord] ] = {
		return Arrays.asList[ UniqueKey[UserRoleRecord] ](Keys.USER_ROLE_PKEY)
	}

	override def getReferences : List[ ForeignKey[UserRoleRecord, _] ] = {
		return Arrays.asList[ ForeignKey[UserRoleRecord, _] ](Keys.USER_ROLE__USER_ROLE_USERNAME_FKEY)
	}

	override def as(alias : String) : UserRole = {
		new UserRole(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : UserRole = {
		new UserRole(name, null)
	}
}
