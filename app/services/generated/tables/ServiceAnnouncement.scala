/**
 * This class is generated by jOOQ
 */
package services.generated.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.sql.Timestamp
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl

import services.generated.Keys
import services.generated.Public
import services.generated.tables.records.ServiceAnnouncementRecord


object ServiceAnnouncement {

	/**
	 * The reference instance of <code>public.service_announcement</code>
	 */
	val SERVICE_ANNOUNCEMENT = new ServiceAnnouncement
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
class ServiceAnnouncement(alias : String, aliased : Table[ServiceAnnouncementRecord], parameters : Array[ Field[_] ]) extends TableImpl[ServiceAnnouncementRecord](alias, Public.PUBLIC, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[ServiceAnnouncementRecord] = {
		classOf[ServiceAnnouncementRecord]
	}

	/**
	 * The column <code>public.service_announcement.id</code>.
	 */
	val ID : TableField[ServiceAnnouncementRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), "")

	/**
	 * The column <code>public.service_announcement.for_user</code>.
	 */
	val FOR_USER : TableField[ServiceAnnouncementRecord, String] = createField("for_user", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

	/**
	 * The column <code>public.service_announcement.content</code>.
	 */
	val CONTENT : TableField[ServiceAnnouncementRecord, String] = createField("content", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

	/**
	 * The column <code>public.service_announcement.created_at</code>.
	 */
	val CREATED_AT : TableField[ServiceAnnouncementRecord, Timestamp] = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), "")

	/**
	 * The column <code>public.service_announcement.viewed_at</code>.
	 */
	val VIEWED_AT : TableField[ServiceAnnouncementRecord, Timestamp] = createField("viewed_at", org.jooq.impl.SQLDataType.TIMESTAMP, "")

	/**
	 * The column <code>public.service_announcement.response</code>.
	 */
	val RESPONSE : TableField[ServiceAnnouncementRecord, String] = createField("response", org.jooq.impl.SQLDataType.CLOB, "")

	/**
	 * Create a <code>public.service_announcement</code> table reference
	 */
	def this() = {
		this("service_announcement", null, null)
	}

	/**
	 * Create an aliased <code>public.service_announcement</code> table reference
	 */
	def this(alias : String) = {
		this(alias, services.generated.tables.ServiceAnnouncement.SERVICE_ANNOUNCEMENT, null)
	}

	private def this(alias : String, aliased : Table[ServiceAnnouncementRecord]) = {
		this(alias, aliased, null)
	}

	override def getIdentity : Identity[ServiceAnnouncementRecord, Integer] = {
		Keys.IDENTITY_SERVICE_ANNOUNCEMENT
	}

	override def getPrimaryKey : UniqueKey[ServiceAnnouncementRecord] = {
		Keys.SERVICE_ANNOUNCEMENT_PKEY
	}

	override def getKeys : List[ UniqueKey[ServiceAnnouncementRecord] ] = {
		return Arrays.asList[ UniqueKey[ServiceAnnouncementRecord] ](Keys.SERVICE_ANNOUNCEMENT_PKEY, Keys.SERVICE_ANNOUNCEMENT_FOR_USER_KEY)
	}

	override def getReferences : List[ ForeignKey[ServiceAnnouncementRecord, _] ] = {
		return Arrays.asList[ ForeignKey[ServiceAnnouncementRecord, _] ](Keys.SERVICE_ANNOUNCEMENT__SERVICE_ANNOUNCEMENT_FOR_USER_FKEY)
	}

	override def as(alias : String) : ServiceAnnouncement = {
		new ServiceAnnouncement(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : ServiceAnnouncement = {
		new ServiceAnnouncement(name, null)
	}
}
