/**
 * This class is generated by jOOQ
 */
package services.generated.tables.records


import java.lang.Integer
import java.lang.String
import java.sql.Timestamp
import java.util.UUID

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl

import services.generated.tables.SharingPolicy


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
class SharingPolicyRecord extends UpdatableRecordImpl[SharingPolicyRecord](SharingPolicy.SHARING_POLICY) with Record7[Integer, UUID, String, String, String, Timestamp, String] {

	/**
	 * Setter for <code>public.sharing_policy.id</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>public.sharing_policy.id</code>.
	 */
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>public.sharing_policy.folder_id</code>.
	 */
	def setFolderId(value : UUID) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>public.sharing_policy.folder_id</code>.
	 */
	def getFolderId : UUID = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[UUID]
	}

	/**
	 * Setter for <code>public.sharing_policy.document_id</code>.
	 */
	def setDocumentId(value : String) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>public.sharing_policy.document_id</code>.
	 */
	def getDocumentId : String = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>public.sharing_policy.shared_by</code>.
	 */
	def setSharedBy(value : String) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>public.sharing_policy.shared_by</code>.
	 */
	def getSharedBy : String = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>public.sharing_policy.shared_with</code>.
	 */
	def setSharedWith(value : String) : Unit = {
		setValue(4, value)
	}

	/**
	 * Getter for <code>public.sharing_policy.shared_with</code>.
	 */
	def getSharedWith : String = {
		val r = getValue(4)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>public.sharing_policy.shared_at</code>.
	 */
	def setSharedAt(value : Timestamp) : Unit = {
		setValue(5, value)
	}

	/**
	 * Getter for <code>public.sharing_policy.shared_at</code>.
	 */
	def getSharedAt : Timestamp = {
		val r = getValue(5)
		if (r == null) null else r.asInstanceOf[Timestamp]
	}

	/**
	 * Setter for <code>public.sharing_policy.access_level</code>.
	 */
	def setAccessLevel(value : String) : Unit = {
		setValue(6, value)
	}

	/**
	 * Getter for <code>public.sharing_policy.access_level</code>.
	 */
	def getAccessLevel : String = {
		val r = getValue(6)
		if (r == null) null else r.asInstanceOf[String]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[Integer] = {
		return super.key.asInstanceOf[ Record1[Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record7 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row7[Integer, UUID, String, String, String, Timestamp, String] = {
		super.fieldsRow.asInstanceOf[ Row7[Integer, UUID, String, String, String, Timestamp, String] ]
	}

	override def valuesRow : Row7[Integer, UUID, String, String, String, Timestamp, String] = {
		super.valuesRow.asInstanceOf[ Row7[Integer, UUID, String, String, String, Timestamp, String] ]
	}
	override def field1 : Field[Integer] = SharingPolicy.SHARING_POLICY.ID
	override def field2 : Field[UUID] = SharingPolicy.SHARING_POLICY.FOLDER_ID
	override def field3 : Field[String] = SharingPolicy.SHARING_POLICY.DOCUMENT_ID
	override def field4 : Field[String] = SharingPolicy.SHARING_POLICY.SHARED_BY
	override def field5 : Field[String] = SharingPolicy.SHARING_POLICY.SHARED_WITH
	override def field6 : Field[Timestamp] = SharingPolicy.SHARING_POLICY.SHARED_AT
	override def field7 : Field[String] = SharingPolicy.SHARING_POLICY.ACCESS_LEVEL
	override def value1 : Integer = getId
	override def value2 : UUID = getFolderId
	override def value3 : String = getDocumentId
	override def value4 : String = getSharedBy
	override def value5 : String = getSharedWith
	override def value6 : Timestamp = getSharedAt
	override def value7 : String = getAccessLevel

	override def value1(value : Integer) : SharingPolicyRecord = {
		setId(value)
		this
	}

	override def value2(value : UUID) : SharingPolicyRecord = {
		setFolderId(value)
		this
	}

	override def value3(value : String) : SharingPolicyRecord = {
		setDocumentId(value)
		this
	}

	override def value4(value : String) : SharingPolicyRecord = {
		setSharedBy(value)
		this
	}

	override def value5(value : String) : SharingPolicyRecord = {
		setSharedWith(value)
		this
	}

	override def value6(value : Timestamp) : SharingPolicyRecord = {
		setSharedAt(value)
		this
	}

	override def value7(value : String) : SharingPolicyRecord = {
		setAccessLevel(value)
		this
	}

	override def values(value1 : Integer, value2 : UUID, value3 : String, value4 : String, value5 : String, value6 : Timestamp, value7 : String) : SharingPolicyRecord = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this.value4(value4)
		this.value5(value5)
		this.value6(value6)
		this.value7(value7)
		this
	}

	/**
	 * Create a detached, initialised SharingPolicyRecord
	 */
	def this(id : Integer, folderId : UUID, documentId : String, sharedBy : String, sharedWith : String, sharedAt : Timestamp, accessLevel : String) = {
		this()

		setValue(0, id)
		setValue(1, folderId)
		setValue(2, documentId)
		setValue(3, sharedBy)
		setValue(4, sharedWith)
		setValue(5, sharedAt)
		setValue(6, accessLevel)
	}
}
