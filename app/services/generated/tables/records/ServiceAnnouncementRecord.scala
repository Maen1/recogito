/**
 * This class is generated by jOOQ
 */
package services.generated.tables.records


import java.lang.Integer
import java.lang.String
import java.sql.Timestamp

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl

import services.generated.tables.ServiceAnnouncement


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
class ServiceAnnouncementRecord extends UpdatableRecordImpl[ServiceAnnouncementRecord](ServiceAnnouncement.SERVICE_ANNOUNCEMENT) with Record6[Integer, String, String, Timestamp, Timestamp, String] {

	/**
	 * Setter for <code>public.service_announcement.id</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>public.service_announcement.id</code>.
	 */
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>public.service_announcement.for_user</code>.
	 */
	def setForUser(value : String) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>public.service_announcement.for_user</code>.
	 */
	def getForUser : String = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>public.service_announcement.content</code>.
	 */
	def setContent(value : String) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>public.service_announcement.content</code>.
	 */
	def getContent : String = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>public.service_announcement.created_at</code>.
	 */
	def setCreatedAt(value : Timestamp) : Unit = {
		setValue(3, value)
	}

	/**
	 * Getter for <code>public.service_announcement.created_at</code>.
	 */
	def getCreatedAt : Timestamp = {
		val r = getValue(3)
		if (r == null) null else r.asInstanceOf[Timestamp]
	}

	/**
	 * Setter for <code>public.service_announcement.viewed_at</code>.
	 */
	def setViewedAt(value : Timestamp) : Unit = {
		setValue(4, value)
	}

	/**
	 * Getter for <code>public.service_announcement.viewed_at</code>.
	 */
	def getViewedAt : Timestamp = {
		val r = getValue(4)
		if (r == null) null else r.asInstanceOf[Timestamp]
	}

	/**
	 * Setter for <code>public.service_announcement.response</code>.
	 */
	def setResponse(value : String) : Unit = {
		setValue(5, value)
	}

	/**
	 * Getter for <code>public.service_announcement.response</code>.
	 */
	def getResponse : String = {
		val r = getValue(5)
		if (r == null) null else r.asInstanceOf[String]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[Integer] = {
		return super.key.asInstanceOf[ Record1[Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record6 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row6[Integer, String, String, Timestamp, Timestamp, String] = {
		super.fieldsRow.asInstanceOf[ Row6[Integer, String, String, Timestamp, Timestamp, String] ]
	}

	override def valuesRow : Row6[Integer, String, String, Timestamp, Timestamp, String] = {
		super.valuesRow.asInstanceOf[ Row6[Integer, String, String, Timestamp, Timestamp, String] ]
	}
	override def field1 : Field[Integer] = ServiceAnnouncement.SERVICE_ANNOUNCEMENT.ID
	override def field2 : Field[String] = ServiceAnnouncement.SERVICE_ANNOUNCEMENT.FOR_USER
	override def field3 : Field[String] = ServiceAnnouncement.SERVICE_ANNOUNCEMENT.CONTENT
	override def field4 : Field[Timestamp] = ServiceAnnouncement.SERVICE_ANNOUNCEMENT.CREATED_AT
	override def field5 : Field[Timestamp] = ServiceAnnouncement.SERVICE_ANNOUNCEMENT.VIEWED_AT
	override def field6 : Field[String] = ServiceAnnouncement.SERVICE_ANNOUNCEMENT.RESPONSE
	override def value1 : Integer = getId
	override def value2 : String = getForUser
	override def value3 : String = getContent
	override def value4 : Timestamp = getCreatedAt
	override def value5 : Timestamp = getViewedAt
	override def value6 : String = getResponse

	override def value1(value : Integer) : ServiceAnnouncementRecord = {
		setId(value)
		this
	}

	override def value2(value : String) : ServiceAnnouncementRecord = {
		setForUser(value)
		this
	}

	override def value3(value : String) : ServiceAnnouncementRecord = {
		setContent(value)
		this
	}

	override def value4(value : Timestamp) : ServiceAnnouncementRecord = {
		setCreatedAt(value)
		this
	}

	override def value5(value : Timestamp) : ServiceAnnouncementRecord = {
		setViewedAt(value)
		this
	}

	override def value6(value : String) : ServiceAnnouncementRecord = {
		setResponse(value)
		this
	}

	override def values(value1 : Integer, value2 : String, value3 : String, value4 : Timestamp, value5 : Timestamp, value6 : String) : ServiceAnnouncementRecord = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this.value4(value4)
		this.value5(value5)
		this.value6(value6)
		this
	}

	/**
	 * Create a detached, initialised ServiceAnnouncementRecord
	 */
	def this(id : Integer, forUser : String, content : String, createdAt : Timestamp, viewedAt : Timestamp, response : String) = {
		this()

		setValue(0, id)
		setValue(1, forUser)
		setValue(2, content)
		setValue(3, createdAt)
		setValue(4, viewedAt)
		setValue(5, response)
	}
}
