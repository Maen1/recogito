/**
 * This class is generated by jOOQ
 */
package services.generated.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.sql.Timestamp
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import services.generated.Keys
import services.generated.Public
import services.generated.tables.records.SharingPolicyRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl


object SharingPolicy {

	/**
	 * The reference instance of <code>public.sharing_policy</code>
	 */
	val SHARING_POLICY = new SharingPolicy
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	),
	comments = "This class is generated by jOOQ"
)
class SharingPolicy(alias : String, aliased : Table[SharingPolicyRecord], parameters : Array[ Field[_] ]) extends TableImpl[SharingPolicyRecord](alias, Public.PUBLIC, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[SharingPolicyRecord] = {
		classOf[SharingPolicyRecord]
	}

	/**
	 * The column <code>public.sharing_policy.id</code>.
	 */
	val ID : TableField[SharingPolicyRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), "")

	/**
	 * The column <code>public.sharing_policy.folder_id</code>.
	 */
	val FOLDER_ID : TableField[SharingPolicyRecord, Integer] = createField("folder_id", org.jooq.impl.SQLDataType.INTEGER, "")

	/**
	 * The column <code>public.sharing_policy.document_id</code>.
	 */
	val DOCUMENT_ID : TableField[SharingPolicyRecord, String] = createField("document_id", org.jooq.impl.SQLDataType.CLOB, "")

	/**
	 * The column <code>public.sharing_policy.shared_by</code>.
	 */
	val SHARED_BY : TableField[SharingPolicyRecord, String] = createField("shared_by", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

	/**
	 * The column <code>public.sharing_policy.shared_with</code>.
	 */
	val SHARED_WITH : TableField[SharingPolicyRecord, String] = createField("shared_with", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

	/**
	 * The column <code>public.sharing_policy.shared_at</code>.
	 */
	val SHARED_AT : TableField[SharingPolicyRecord, Timestamp] = createField("shared_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), "")

	/**
	 * The column <code>public.sharing_policy.access_level</code>.
	 */
	val ACCESS_LEVEL : TableField[SharingPolicyRecord, String] = createField("access_level", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

	/**
	 * Create a <code>public.sharing_policy</code> table reference
	 */
	def this() = {
		this("sharing_policy", null, null)
	}

	/**
	 * Create an aliased <code>public.sharing_policy</code> table reference
	 */
	def this(alias : String) = {
		this(alias, services.generated.tables.SharingPolicy.SHARING_POLICY, null)
	}

	private def this(alias : String, aliased : Table[SharingPolicyRecord]) = {
		this(alias, aliased, null)
	}

	override def getIdentity : Identity[SharingPolicyRecord, Integer] = {
		Keys.IDENTITY_SHARING_POLICY
	}

	override def getPrimaryKey : UniqueKey[SharingPolicyRecord] = {
		Keys.SHARING_POLICY_PKEY
	}

	override def getKeys : List[ UniqueKey[SharingPolicyRecord] ] = {
		return Arrays.asList[ UniqueKey[SharingPolicyRecord] ](Keys.SHARING_POLICY_PKEY)
	}

	override def getReferences : List[ ForeignKey[SharingPolicyRecord, _] ] = {
		return Arrays.asList[ ForeignKey[SharingPolicyRecord, _] ](Keys.SHARING_POLICY__SHARING_POLICY_FOLDER_ID_FKEY, Keys.SHARING_POLICY__SHARING_POLICY_SHARED_BY_FKEY, Keys.SHARING_POLICY__SHARING_POLICY_SHARED_WITH_FKEY)
	}

	override def as(alias : String) : SharingPolicy = {
		new SharingPolicy(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : SharingPolicy = {
		new SharingPolicy(name, null)
	}
}
